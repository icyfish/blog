{"version":3,"file":"component---src-pages-index-js-8f2bd1145ce08069baf5.js","mappings":"gLAiDA,MAtCYA,KAAO,IAADC,EAAAC,EAChB,MAAMC,GAAOC,EAAAA,EAAAA,gBAAe,cAiBS,QAAzBH,EAAGE,EAAKE,KAAKC,oBAAY,IAAAL,GAAtBA,EAAwBM,OACF,QAAzBL,EAAGC,EAAKE,KAAKC,oBAAY,IAAAJ,GAAtBA,EAAwBM,OAEvC,OACEC,EAAAA,cAAA,OAAKC,UAAU,OACbD,EAAAA,cAACE,EAAAA,EAAW,CACVD,UAAU,aACVE,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,gCACJC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,IAAI,kBAAiBC,YAAAC,EAAA,QAGnB,E,oBC2BV,MAhEkBC,IAAyB,IAADpB,EAAA,IAAvB,KAAEE,EAAI,SAAEmB,GAAUD,EACnC,MAAME,GAAkC,QAAtBtB,EAAAE,EAAKE,KAAKC,oBAAY,IAAAL,OAAA,EAAtBA,EAAwBuB,QAAK,QACzCC,EAAQtB,EAAKuB,kBAAkBD,MACrC,OAAqB,IAAjBA,EAAME,OAENlB,EAAAA,cAACmB,EAAAA,EAAM,CAACN,SAAUA,EAAUE,MAAOD,GACjCd,EAAAA,cAACoB,EAAAA,EAAG,CAACL,MAAM,cACXf,EAAAA,cAACT,EAAG,MACJS,EAAAA,cAAA,SAAG,8JAUPA,EAAAA,cAACmB,EAAAA,EAAM,CAACN,SAAUA,EAAUE,MAAOD,GACjCd,EAAAA,cAACoB,EAAAA,EAAG,CAACL,MAAM,cACXf,EAAAA,cAACT,EAAG,MACJS,EAAAA,cAAA,MAAIC,UAAU,cACXe,EAAMK,KAAIC,IACT,MAAMP,EAAQO,EAAKC,KAAKC,YAAYT,OAASO,EAAKC,KAAKE,OAAOC,KAE9D,OACE1B,EAAAA,cAAA,MAAI2B,IAAKL,EAAKC,KAAKE,OAAOC,MACxB1B,EAAAA,cAAA,WACEC,UAAU,iBACV2B,WAAS,EACTC,SAAS,6BAET7B,EAAAA,cAAA,cACEA,EAAAA,cAAA,UACEA,EAAAA,cAAC8B,EAAAA,KAAI,CAACC,GAAIT,EAAKC,KAAKE,OAAOC,KAAMM,SAAS,OACxChC,EAAAA,cAAA,QAAMgC,SAAS,YAAYjB,KAG/Bf,EAAAA,cAAA,aAAQsB,EAAKC,KAAKC,YAAYS,MAI9BjC,EAAAA,cAAA,QAAMkC,MAAO,CAAEC,WAAY,SClDtC,SAA2BC,GAChC,IAAIC,EAAOC,KAAKC,MAAMH,EAAU,GAChC,OAAIC,EAAO,EACC,IAAIG,MAAMF,KAAKC,MAAMF,EAAOC,KAAKG,IACxCC,KAAK,MACLC,KAAK,IAAG,IAAIP,EAAO,YAEZ,IAAII,MAAMH,GAAQ,GAAGK,KAAK,MAAMC,KAAK,IAAG,IAAIP,EAAO,WAEjE,CD0CqBQ,CAAkBtB,EAAKC,KAAKsB,cAGjC7C,EAAAA,cAAA,eACEA,EAAAA,cAAA,KACE8C,wBAAyB,CACvBC,OACEzB,EAAKC,KAAKC,YAAYwB,aAAe1B,EAAKC,KAAK0B,SAEnDjB,SAAS,kBAIZ,KAIJ,C","sources":["webpack://blog/./src/components/Bio.js","webpack://blog/./src/pages/index.js","webpack://blog/./src/utils/helpers.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"AUTO\", \"WEBP\", \"AVIF\"]}\n        src=\"../../static/images/photo.jpg\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {/* <p>111</p> */}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/Bio\"\nimport Layout from \"../components/Layout\"\nimport Seo from \"../components/Seo\"\nimport { formatReadingTime } from \"../utils/helpers\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const edges = data.allMarkdownRemark.edges\n  if (edges.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Seo title=\"All edges\" />\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title=\"All posts\" />\n      <Bio />\n      <ol className=\"title_list\">\n        {edges.map(edge => {\n          const title = edge.node.frontmatter.title || edge.node.fields.slug\n\n          return (\n            <li key={edge.node.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h3>\n                    <Link to={edge.node.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h3>\n                  <small>{edge.node.frontmatter.date}</small>\n                  {/* <span style={{ marginLeft: \"10px\", color: \"#6d191980\" }}>\n                    {edge.node.wordCount.words} words\n                  </span> */}\n                  <span style={{ marginLeft: \"10px\" }}>\n                    {formatReadingTime(edge.node.timeToRead)}\n                  </span>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html:\n                        edge.node.frontmatter.description || edge.node.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      filter: { frontmatter: { draft: { ne: true } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          wordCount {\n            words\n          }\n          timeToRead\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`\n","export function formatReadingTime(minutes) {\n  let cups = Math.round(minutes / 5)\n  if (cups > 5) {\n    return `${new Array(Math.round(cups / Math.E))\n      .fill(\"üç±\")\n      .join(\"\")} ${minutes} min read`\n  } else {\n    return `${new Array(cups || 1).fill(\"‚òïÔ∏è\").join(\"\")} ${minutes} min read`\n  }\n}"],"names":["Bio","_data$site$siteMetada","_data$site$siteMetada2","data","useStaticQuery","site","siteMetadata","author","social","React","className","StaticImage","layout","formats","src","width","height","quality","alt","__imageData","require","_ref","location","siteTitle","title","edges","allMarkdownRemark","length","Layout","Seo","map","edge","node","frontmatter","fields","slug","key","itemScope","itemType","Link","to","itemProp","date","style","marginLeft","minutes","cups","Math","round","Array","E","fill","join","formatReadingTime","timeToRead","dangerouslySetInnerHTML","__html","description","excerpt"],"sourceRoot":""}